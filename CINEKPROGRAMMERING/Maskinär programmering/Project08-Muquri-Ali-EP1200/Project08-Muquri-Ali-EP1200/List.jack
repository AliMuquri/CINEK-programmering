class List {
	field int data;
	field List next;

	/* Creates a new List object. */
	constructor List new(int car, List cdr) {
		let data = car;
		let next = cdr;
		return this;
	}

	/* Disposes this List by recursively disposing its tail. */
	method void dispose() {
		if (~(next =  null)) {
			do next.dispose();
		}
		// Use an OS routine to recycle the memory held by this object.
		do Memory.deAlloc(this);
		return;
	}

	/* Prints the list*/

	method void print() {
		do Output.printString(" -> ");
		do Output.printInt(data);
		if (~(next =  null)) {
			do next.print();
		}
		return;
	}

	/* Inserts the argument in the right position of the list (ascending order)*/

	method void insertInOrder(int element){
			var List v;
			if (data < element){
				if (~(next=null)){
					do next.insertInOrder(element);
				}
				else{
					let v = List.new(element,null);
					let next = v;
				}
			}
			else{
				let v = List.new(data,next);
				let data=element;
				let next = v;
			}
			return;
	}

	/* Searches the argument in the list, if found, it returns the corresponding List object*/
	method List find(int toFind){
		var List v;
		if (data=toFind){
			return this;
		}
		else{
			if (~(next=null)){
				let v = next.find(toFind);
				return v;
			}
		}
		return null;
	}
}
