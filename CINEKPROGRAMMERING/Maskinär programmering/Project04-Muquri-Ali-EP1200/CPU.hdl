// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // From the litterature " i xx a cccccc ddd jjj " 16-bit word
    // instruction[15]--> if i=1 (true) A or i=0(false) C-instructions
    // instruction[12] --> (a) is used to either use ARegister value or pass forward the inM
    // instruction[6..11] --> (cs) C-instruction for ALU compute
    // instruction[3..5] --> (ds) C-instruction for ALU  storage computed value destination
    // instruction[0..2] --> (js) C-instruction specifies a jump condition

            // DECODER
            // Establish all A-instruction and C-instruction
            // According to litterature Fig 4.3-4.5 control
            // if its turns out to be a const than all c-d-j must be set to zero.
    Or(a=instruction[15],b=false, out=i); // more pleasant to write i when needed
    Not(in=i,out=noti);                     //Must negate 
    Or(a=noti,b=instruction[5],out=aS);      // i=0 gives A-instruction or if memory des given we should load ARegister
    And(a=i,b=instruction[4],out=dS);      // Only if c-instr i=1 and memory dest given we should load DRegister
    And(a=i,b=instruction[3],out=writeM);  // Only if c-instr, i=1 and memory dest given we write out to Memory

            //Jump(t)
    And(a=ngOut,b=instruction[2],out=JGT);      //if out >0 jump kolla med not(ngOut)
    And(a=zrOut,b=instruction[1],out=JEQ);      //if out=0 jump kolla med zrOut
    And(a=N,b=instruction[0],out=JLT);          //if If out < 0 jump kolla med ngOut
    Or(a=JLT, b=JEQ,out=w1);
    Or(a=JGT, b=w1,out=w2);
    And(a=i, b=w2, out=jump);  //Only if C-instr

            //Implication from the Or above. If i=0, the A-instruction follows
            //if i=1 then no A-instruction and c-inst follow, outM is repeated
            //to ARegister

    Mux16(a=instruction, b=outMBack, sel=i, out=s1);

            //Load ARegister if aS=1, dest for d1 is given
    ARegister(in=s1, load=aS, out=aregOut, out[0..14]=addressM);

            //Select between A or M depending on a=1 or a=0.
    Mux16(a=aregOut, b=inM, sel=instruction[12], out=y);

            //Load DRegister if dS, dest for d2 is given
    DRegister(in=outMBack, load=dS, out=x);

    ALU(x=x,y=y,zx=instruction[11],nx=instruction[10],zy=instruction[9],
        ny=instruction[8],f=instruction[7],no=instruction[6],
        out=outM,out=outMBack,zr=zrOut,ng=ngOut);
    Or(a=zrOut, b=ngOut, out=notN);
    Not(in=notN, out=N);

            // If jump=1
            // PC(t)=P(t-1) +1 gives inc=true if jump(t) is false


    PC(in=aregOut,load=jump ,reset=reset, inc=true, reset=reset, out[0..14]=pc);
}
